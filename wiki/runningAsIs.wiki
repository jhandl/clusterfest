#summary How to implement and run a clusterfest basic installation

_For introduction to Clusterfest concepts please read [atAGlance Clusterfest at a glance]_

=Running Clusterfest as is=
==Configuring the server==

Configuration of the server is done in the {{{clustering.properties}}} config file.

Here you can config:

 * *clustering.nodes*: the list of nodes in the form address:port or address:port:installDir 
 * *clustering.modules*: the list of modules in the form moduleName:moduleClass. The module class must be a subclass of {{{NodeContainerModule}}} and have an empty constructor

Any extra module configuration can be added here.

*Default modules will be fine, just add your nodes*

==Running the server==

*start.sh*, *status.sh*, *stop.sh* scripts are provided to start and stop the server. Start.sh starts the clusterfest webapp in port 47050. 

To see if it's running, check on your web browser
{{{
http://localhost:47050/clustering
}}}

==Adding clustering code to the node==

The server will call remote methods on your nodes. For that to happen you must have a {{{ClusterableListener}}} created somewhere in your node code. You create it specifying a port where it will listen to (which must match the corresponding server node configuration).

{{{
ClusterableListener clusterableListener = new ClusterableListener(port);
}}}

This will read a file called clustering.node.properties for configuration. There you can set the following variables:

 * {{{clustering.node.type}}}
_The node type is a String that allows for further node discrimination, for example for identification in the node list home page (see [http://opensource.flaptor.com/clusterfest/screenshots.html screenshot]), or for enabling different behaviors within a module_
 * {{{clustering.node.listeners}}}
_a list of pairs context:className meaning the class to be instantiated and listen at that context_

Then add module servers. Most modules will give you a helper method.

{{{
Monitor.addMonitorServer(clusterableServer, new AbstractMonitoreable() {...implement methods here...});
Controller.addControllerServer(clusterableServer, new ControllableImplementation());
}}}

Otherwise you have to provide a context (String) and a handler (implementation of the module interface wrapped by {{{XmlrpcSerialization}}} - see [addingAModule adding a module]).

{{{
clusterableServer.addModuleServer("controllable", XmlrpcSerialization.handler(new ControllableImplementation()));
}}}